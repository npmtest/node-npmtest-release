{"/home/travis/build/npmtest/node-npmtest-release/test.js":"/* istanbul instrument in package npmtest_release */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-release/lib.npmtest_release.js":"/* istanbul instrument in package npmtest_release */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_release = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_release = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-release/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-release && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_release */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_release\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_release.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_release.rollup.js'] =\n            local.assetsDict['/assets.npmtest_release.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_release.__dirname + '/lib.npmtest_release.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-release/node_modules/release/bin/release.js":"#!/usr/bin/env node\n\n// Packages\nconst args = require('args');\nconst chalk = require('chalk');\nconst semVer = require('semver');\nconst inquirer = require('inquirer');\nconst open = require('open');\nconst { coroutine } = require('bluebird');\nconst updateNotifier = require('update-notifier');\nconst { red } = require('chalk');\nconst nodeVersion = require('node-version');\n\n// Ours\nconst groupChanges = require('../lib/group');\nconst { branchSynced, getRepo } = require('../lib/repo');\nconst getCommits = require('../lib/commits');\nconst getChoices = require('../lib/choices');\nconst getTags = require('../lib/tags');\nconst definitions = require('../lib/definitions');\nconst connect = require('../lib/connect');\nconst createChangelog = require('../lib/changelog');\nconst handleSpinner = require('../lib/spinner');\nconst pkg = require('../package');\n\n// Throw an error if node version is too low\nif (nodeVersion.major < 6) {\n  console.error(\n    `${red('Error!')} Now requires at least version 6 of Node. Please upgrade!`\n  );\n  process.exit(1);\n}\n\n// Let user know if there's an update\n// This isn't important when deployed to Now\nif (pkg.dist) {\n  updateNotifier({ pkg }).notify();\n}\n\nargs\n  .option('pre', 'Mark the release as prerelease')\n  .option('overwrite', 'If the release already exists, replace it');\n\nconst flags = args.parse(process.argv);\n\nlet githubConnection;\nlet repoDetails;\n\nconst changeTypes = [\n  {\n    handle: 'major',\n    name: 'Major Change',\n    description: 'incompatible API change'\n  },\n  {\n    handle: 'minor',\n    name: 'Minor Change',\n    description: 'backwards-compatible functionality'\n  },\n  {\n    handle: 'patch',\n    name: 'Patch',\n    description: 'backwards-compatible bug fix'\n  }\n];\n\nconst getReleaseURL = (release, edit = false) => {\n  if (!release || !release.html_url) {\n    return false;\n  }\n\n  const htmlURL = release.html_url;\n  return edit ? htmlURL.replace('/tag/', '/edit/') : htmlURL;\n};\n\nconst createRelease = (tag, changelog, exists) => {\n  const isPre = flags.pre ? 'pre' : '';\n  handleSpinner.create(`Uploading ${isPre}release`);\n\n  const methodPrefix = exists ? 'edit' : 'create';\n  const method = methodPrefix + 'Release';\n\n  const body = {\n    owner: repoDetails.user,\n    repo: repoDetails.repo,\n    /* eslint-disable camelcase */\n    tag_name: tag.tag,\n    target_commitish: tag.hash,\n    /* eslint-enable camelcase */\n    body: changelog,\n    draft: true,\n    prerelease: flags.pre\n  };\n\n  if (exists) {\n    body.id = exists;\n  }\n\n  githubConnection.repos[method](body, (err, response) => {\n    if (err || !response.data) {\n      console.log('\\n');\n      handleSpinner.fail('Failed to upload release.');\n    }\n\n    global.spinner.succeed();\n    const releaseURL = getReleaseURL(response.data, true);\n\n    if (releaseURL) {\n      open(releaseURL);\n    }\n\n    console.log(`\\n${chalk.bold('Done!')} 🎉 Opening release in browser...`);\n  });\n};\n\nconst orderCommits = (commits, tags, exists) => {\n  const questions = [];\n  const predefined = {};\n\n  const choices = getChoices(changeTypes, tags);\n\n  // Show the latest changes first\n  commits.reverse();\n\n  for (const commit of commits) {\n    const defTitle = definitions.type(commit.title, changeTypes);\n    const defDescription = definitions.type(commit.description, changeTypes);\n\n    const definition = defTitle || defDescription;\n\n    if (definition) {\n      predefined[commit.hash] = definition;\n      continue;\n    }\n\n    questions.push({\n      name: commit.hash,\n      message: commit.title,\n      type: 'list',\n      choices\n    });\n  }\n\n  global.spinner.succeed();\n\n  // Prevents the spinner from getting succeeded\n  // again once new spinner gets created\n  global.spinner = false;\n\n  console.log(\n    `${chalk.green('!')} Please enter the type of change for each commit:\\n`\n  );\n\n  inquirer.prompt(questions).then(\n    coroutine(function*(types) {\n      // Update the spinner status\n      console.log('');\n      handleSpinner.create('Generating the changelog');\n\n      const results = Object.assign({}, predefined, types);\n      const grouped = groupChanges(results, changeTypes);\n      const changelog = yield createChangelog(grouped, commits, changeTypes);\n\n      // Upload changelog to GitHub Releases\n      createRelease(tags[0], changelog, exists);\n    })\n  );\n};\n\nconst collectChanges = (tags, exists = false) => {\n  handleSpinner.create('Loading commit history');\n\n  getCommits(tags).then(commits => {\n    for (const commit of commits) {\n      if (semVer.valid(commit.title)) {\n        const index = commits.indexOf(commit);\n        commits.splice(index, 1);\n      }\n    }\n\n    if (commits.length < 1) {\n      handleSpinner.fail('No changes happened since the last release.');\n    }\n\n    orderCommits(commits, tags, exists);\n  });\n};\n\nconst checkReleaseStatus = coroutine(function*() {\n  let tags;\n\n  try {\n    tags = yield getTags();\n  } catch (err) {\n    handleSpinner.fail('Directory is not a Git repository.');\n  }\n\n  if (tags.length < 1) {\n    handleSpinner.fail('No tags available for release.');\n  }\n\n  const synced = yield branchSynced();\n\n  if (!synced) {\n    handleSpinner.fail('Your branch needs to be up-to-date with origin.');\n  }\n\n  githubConnection = yield connect();\n  repoDetails = yield getRepo();\n\n  handleSpinner.create('Checking if release already exists');\n\n  githubConnection.repos.getReleases(\n    {\n      owner: repoDetails.user,\n      repo: repoDetails.repo\n    },\n    (err, response) => {\n      if (err) {\n        handleSpinner.fail(\"Couldn't check if release exists.\");\n      }\n\n      if (!response.data || response.data.length < 1) {\n        collectChanges(tags);\n        return;\n      }\n\n      let existingRelease = null;\n\n      for (const release of response.data) {\n        if (release.tag_name === tags[0].tag) {\n          existingRelease = release;\n          break;\n        }\n      }\n\n      if (!existingRelease) {\n        collectChanges(tags);\n        return;\n      }\n\n      if (flags.overwrite) {\n        global.spinner.text = 'Overwriting release, because it already exists';\n        collectChanges(tags, existingRelease.id);\n\n        return;\n      }\n\n      global.spinner.succeed();\n      console.log('');\n\n      const releaseURL = getReleaseURL(existingRelease);\n\n      if (releaseURL) {\n        open(releaseURL);\n      }\n\n      const alreadyThere = 'Release already exists. Opening in browser...';\n      console.error(`${chalk.red('Error!')} ` + alreadyThere);\n\n      process.exit(1);\n    }\n  );\n});\n\ncheckReleaseStatus();\n","/home/travis/build/npmtest/node-npmtest-release/node_modules/release/lib/group.js":"module.exports = (changes, changeTypes) => {\n  const types = {};\n\n  for (const type of changeTypes) {\n    types[type.handle] = [];\n  }\n\n  for (const change in changes) {\n    if (!{}.hasOwnProperty.call(changes, change)) {\n      continue;\n    }\n\n    const changeType = changes[change];\n\n    if (changeType === 'ignore') {\n      continue;\n    }\n\n    types[changeType].push(change);\n  }\n\n  return types;\n};\n","/home/travis/build/npmtest/node-npmtest-release/node_modules/release/lib/repo.js":"// Packages\nconst git = require('git-state');\nconst repoName = require('git-repo-name');\nconst repoUser = require('git-username');\n\n// Ours\nconst handleSpinner = require('./spinner');\n\nexports.getRepo = () =>\n  new Promise(resolve => {\n    repoName((err, repo) => {\n      if (err) {\n        handleSpinner.fail('Could not determine GitHub repository.');\n        return;\n      }\n\n      const details = { repo };\n      details.user = repoUser();\n\n      resolve(details);\n    });\n  });\n\nexports.branchSynced = () =>\n  new Promise(resolve => {\n    const path = process.cwd();\n\n    const ignore = ['branch', 'stashes', 'untracked'];\n\n    git.isGit(path, exists => {\n      if (!exists) {\n        return;\n      }\n\n      git.check(path, (err, results) => {\n        if (err) {\n          resolve(false);\n          return;\n        }\n\n        for (const state of ignore) {\n          delete results[state];\n        }\n\n        for (const result in results) {\n          if (results[result] > 0) {\n            resolve(false);\n            break;\n          }\n        }\n\n        resolve(true);\n      });\n    });\n  });\n","/home/travis/build/npmtest/node-npmtest-release/node_modules/release/lib/spinner.js":"// Packages\nconst ora = require('ora');\nconst { red } = require('chalk');\n\nexports.create = message => {\n  if (global.spinner) {\n    global.spinner.succeed();\n  }\n\n  global.spinner = ora(message).start();\n};\n\nexports.fail = message => {\n  if (global.spinner) {\n    global.spinner.fail();\n    console.log('');\n  }\n\n  console.error(`${red('Error!')} ${message}`);\n\n  // eslint-disable-next-line unicorn/no-process-exit\n  process.exit(1);\n};\n","/home/travis/build/npmtest/node-npmtest-release/node_modules/release/lib/commits.js":"// Native\nconst path = require('path');\n\n// Packages\nconst gitCommits = require('git-commits');\n\n// Ours\nconst handleSpinner = require('./spinner');\n\nmodule.exports = tags =>\n  new Promise((resolve, reject) => {\n    const [release, parent] = tags;\n\n    if (!release || !parent || !parent.hash || !release.hash) {\n      reject(new Error('the first release should be created manually.'));\n    }\n\n    const rev = `${parent.hash}..${release.hash}`;\n    const repoPath = path.join(process.cwd(), '.git');\n    const commits = [];\n\n    gitCommits(repoPath, { rev })\n      .on('data', commit => {\n        // Detect and ignore the release commit\n        // associated to the tag\n        if (commit.hash === release.hash) {\n          return;\n        }\n\n        commits.push(commit);\n      })\n      .on('error', () => {\n        handleSpinner.fail('Not able to collect commits.');\n      })\n      .on('end', () => {\n        resolve(commits);\n      });\n  });\n","/home/travis/build/npmtest/node-npmtest-release/node_modules/release/lib/choices.js":"// Packages\nconst inquirer = require('inquirer');\nconst semVer = require('semver');\n\nmodule.exports = (changeTypes, tags) => {\n  const list = [];\n  let notNeeded;\n\n  const releaseType = semVer.diff(tags[1].version, tags[0].version);\n\n  switch (releaseType) {\n    case 'minor':\n      notNeeded = 1;\n      break;\n    case 'patch':\n      notNeeded = 2;\n      break;\n    default:\n      notNeeded = 0;\n  }\n\n  if (notNeeded) {\n    changeTypes.splice(0, notNeeded);\n  }\n\n  for (const type of changeTypes) {\n    const short = type.handle;\n\n    list.push({\n      name: `${type.name} (${type.description})`,\n      value: short,\n      short: '(' + short + ')'\n    });\n  }\n\n  return list.concat([\n    new inquirer.Separator(),\n    {\n      name: 'Ignore',\n      short: '(ignored)',\n      value: 'ignore'\n    }\n  ]);\n};\n","/home/travis/build/npmtest/node-npmtest-release/node_modules/release/lib/tags.js":"// Packages\nconst semVer = require('semver');\nconst taggedVersions = require('tagged-versions');\nconst { coroutine } = require('bluebird');\n\nmodule.exports = coroutine(function*(rev = 'HEAD') {\n  const [tags, latest] = yield Promise.all([\n    taggedVersions.getList(),\n    taggedVersions.getLastVersion({ rev })\n  ]);\n\n  if (!latest) {\n    return [];\n  }\n\n  for (const commit of tags) {\n    if (semVer.lt(commit.version, latest.version)) {\n      return [latest, commit];\n    }\n  }\n\n  return [latest];\n});\n","/home/travis/build/npmtest/node-npmtest-release/node_modules/release/lib/definitions.js":"exports.type = (text, changeTypes) => {\n  for (const type of changeTypes) {\n    const handle = '(' + type.handle + ')';\n\n    if (text.includes(handle)) {\n      return type.handle;\n    }\n  }\n\n  return false;\n};\n\nexports.reference = title => {\n  const match = / \\(#[-0-9]+\\)/.exec(title);\n\n  if (!match) {\n    return false;\n  }\n\n  return match[0].replace(' (', '').replace(')', '');\n};\n","/home/travis/build/npmtest/node-npmtest-release/node_modules/release/lib/connect.js":"// Native\nconst queryString = require('querystring');\n\n// Packages\nconst request = require('request-promise-native');\nconst open = require('open');\nconst randomString = require('random-string');\nconst retry = require('async-retry');\nconst Storage = require('configstore');\nconst GitHubAPI = require('github');\nconst sleep = require('then-sleep');\nconst { coroutine } = require('bluebird');\n\n// Ours\nconst pkg = require('../package');\nconst handleSpinner = require('./spinner');\n\n// Initialize token storage\nconst config = new Storage(pkg.name);\n\nconst github = new GitHubAPI({\n  protocol: 'https',\n  headers: {\n    'user-agent': `Release v${pkg.version}`\n  }\n});\n\nconst tokenAPI = state =>\n  retry(\n    () =>\n      new Promise((resolve, reject) => {\n        request({\n          uri: 'https://release-auth.now.sh',\n          qs: {\n            state\n          },\n          json: true\n        })\n          .then(res => {\n            if (res.status === 403) {\n              reject(new Error('Unauthorized'));\n            }\n\n            if (res.error) {\n              reject(res.error);\n            }\n\n            resolve(res.token);\n          })\n          .catch(reject);\n      }),\n    {\n      retries: 500\n    }\n  );\n\nconst validateToken = token =>\n  new Promise(resolve => {\n    github.authenticate({\n      type: 'token',\n      token\n    });\n\n    // See if the token works by getting\n    // the data for our company's account\n    github.users.getForUser(\n      {\n        username: 'zeit'\n      },\n      err => {\n        if (err) {\n          resolve(false);\n          return;\n        }\n\n        resolve(true);\n      }\n    );\n  });\n\nconst loadToken = coroutine(function*() {\n  if (config.has('token')) {\n    const fromStore = config.get('token');\n    const valid = yield validateToken(fromStore);\n\n    return valid ? fromStore : false;\n  }\n\n  return false;\n});\n\nconst requestToken = coroutine(function*() {\n  let authURL = 'https://github.com/login/oauth/authorize';\n\n  const state = randomString({\n    length: 20\n  });\n\n  const params = {\n    // eslint-disable-next-line camelcase\n    client_id: '08bd4d4e3725ce1c0465',\n    scope: 'repo',\n    state\n  };\n\n  authURL += '?' + queryString.stringify(params);\n  open(authURL);\n\n  const token = yield tokenAPI(state);\n  config.set('token', token);\n\n  return token;\n});\n\nmodule.exports = coroutine(function*() {\n  let token = yield loadToken();\n\n  if (!token) {\n    handleSpinner.create('Opening GitHub authentication page');\n    yield sleep(100);\n\n    try {\n      token = yield requestToken();\n    } catch (err) {\n      handleSpinner.fail(\"Couldn't load token.\");\n    }\n  }\n\n  github.authenticate({\n    type: 'token',\n    token\n  });\n\n  return github;\n});\n","/home/travis/build/npmtest/node-npmtest-release/node_modules/release/lib/changelog.js":"// Packages\nconst { plural } = require('pluralize');\nconst stripWhitespace = require('trim');\nconst { coroutine } = require('bluebird');\n\n// Ours\nconst pickCommit = require('./pick-commit');\n\nmodule.exports = coroutine(function*(types, commits, changeTypes) {\n  let text = '';\n  const credits = new Set();\n\n  for (const type in types) {\n    if (!{}.hasOwnProperty.call(types, type)) {\n      continue;\n    }\n\n    const changes = types[type];\n\n    if (changes.length < 1) {\n      continue;\n    }\n\n    const typeInfo = changeTypes.filter(item => {\n      return item.handle === type;\n    })[0];\n\n    // Add heading\n    text += `### ${plural(typeInfo.name)} \\n\\n`;\n\n    // Find last change, in order to be able\n    // to add a newline after it\n    const lastChange = changes[changes.length - 1];\n\n    for (const change of changes) {\n      const changeDetails = yield pickCommit(change, commits, changeTypes);\n\n      if (changeDetails.text) {\n        text += changeDetails.text;\n      }\n\n      if (changeDetails.credits && changeDetails.credits.length > 0) {\n        changeDetails.credits.forEach(item => {\n          // Don't add bots to the credits\n          if (item.includes('[bot]')) {\n            return;\n          }\n\n          credits.add(item);\n        });\n      }\n\n      if (change === lastChange) {\n        text += '\\n';\n      }\n    }\n  }\n\n  if (credits.size > 0) {\n    text += '### Credits \\n\\n';\n    text += 'Huge thanks to ';\n\n    // GitHub links usernames if prefixed with @\n    let index = 1;\n    credits.forEach(credit => {\n      text += `@${credit}`;\n\n      const penultimate = index === credits.size - 1;\n      const notLast = index !== credits.size;\n\n      if (penultimate) {\n        text += ' and ';\n      } else if (notLast) {\n        text += ', ';\n      }\n\n      index += 1;\n    });\n\n    text += ' for their help!';\n    text += '\\n';\n  }\n\n  // Remove newlines from the end\n  return stripWhitespace.right(text);\n});\n","/home/travis/build/npmtest/node-npmtest-release/node_modules/release/lib/pick-commit.js":"// Packages\nconst { coroutine } = require('bluebird');\n\n// Ours\nconst cleanCommitTitle = require('./clean-title');\nconst getCredits = require('./credits');\n\nmodule.exports = coroutine(function*(hash, all, changeTypes) {\n  const related = all.filter(item => {\n    return item.hash === hash;\n  })[0];\n\n  const title = cleanCommitTitle(related.title, changeTypes);\n  let credits = [];\n\n  if (title.ref) {\n    hash = title.ref;\n\n    const rawHash = hash.split('#')[1];\n\n    // Retrieve users that have collaborated on a change\n    const collaborators = yield getCredits(rawHash);\n\n    if (collaborators) {\n      credits = credits.concat(collaborators);\n    }\n  }\n\n  return {\n    text: `- ${title.content}: ${hash}\\n`,\n    credits\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-release/node_modules/release/lib/clean-title.js":"// Packages\nconst capitalize = require('capitalize');\nconst stripWhitespace = require('trim');\n\n// Ours\nconst definitions = require('./definitions');\n\nmodule.exports = (title, changeTypes) => {\n  const toReplace = {\n    type: definitions.type(title, changeTypes),\n    ref: definitions.reference(title)\n  };\n\n  for (const definition in toReplace) {\n    if (!{}.hasOwnProperty.call(toReplace, definition)) {\n      continue;\n    }\n\n    const state = toReplace[definition];\n\n    if (state) {\n      title = title.replace('(' + state + ')', '');\n    }\n  }\n\n  return {\n    content: stripWhitespace(capitalize(title)),\n    ref: toReplace.ref\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-release/node_modules/release/lib/credits.js":"// Packages\nconst { coroutine } = require('bluebird');\n\n// Ours\nconst connect = require('./connect');\nconst repo = require('./repo');\n\nconst getPullRequest = number =>\n  new Promise(\n    coroutine(function*(resolve, reject) {\n      const repoDetails = yield repo.getRepo();\n      const github = yield connect();\n\n      github.pullRequests.get(\n        {\n          owner: repoDetails.user,\n          repo: repoDetails.repo,\n          number\n        },\n        (err, results) => {\n          if (err || !results.data) {\n            reject(err);\n            return;\n          }\n\n          resolve(results.data);\n        }\n      );\n    })\n  );\n\nmodule.exports = coroutine(function*(number) {\n  let data;\n\n  try {\n    data = yield getPullRequest(number);\n  } catch (err) {\n    return;\n  }\n\n  if (data.user) {\n    return [data.user.login];\n  }\n\n  return false;\n});\n"}